import datetime
from main import bot, dp
from keyboards import *
from aiogram import Bot, Dispatcher, types, Router
from aiogram import types, F
from aiogram.types.input_file import FSInputFile
from aiogram.utils.formatting import Text, Code, Bold
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ContentType, Message
"from aiogram.utils import executor"
from db import Database
from states import *

db = Database('database.db')

PRICE = {
    '1': [types.LabeledPrice(label='Apple Gift Card 500 ‚ÇΩ', amount=500*1.3*100)],
    '2': [types.LabeledPrice(label='Apple Gift Card 1500 ‚ÇΩ', amount=1500*1.3*100)],
    '3': [types.LabeledPrice(label='Apple Gift Card 2000 ‚ÇΩ', amount=2000*1.3*100)],
    '4': [types.LabeledPrice(label='Apple Gift Card 3000 ‚ÇΩ', amount=3000*1.3*100)],
    '5': [types.LabeledPrice(label='Apple Gift Card 4000 ‚ÇΩ', amount=4000*1.3*100)],
    '6': [types.LabeledPrice(label='Apple Gift Card 5000 ‚ÇΩ', amount=5000*1.3*100)],
    '7': [types.LabeledPrice(label='Apple Gift Card 10000 ‚ÇΩ', amount=10000*1.3*100)]
}



@dp.message(Command('start'))
async def start(message: types.Message):
    if (db.user_exists(message.from_user.id)):
        if (int(db.admin_exists(message.from_user.id)) == 1):
            await bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                   reply_markup=main_adm_keyboard)
        else:
            await bot.send_message(message.chat.id, f"{message.from_user.full_name}, —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!",
                           reply_markup=keyboard)
    else:
        db.add_user(user_id=message.from_user.id, signup=datetime.date.today())
        await bot.send_message(message.chat.id, f"{message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

@dp.message(Command('profile'))
async def profile(message: types.Message):
    content = Text(
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n",
        "üÜî ID: ", (Code(message.from_user.id)), "\n",
        "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ", db.reg_date(user_id=message.from_user.id), "\n"
        "üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: ", db.bills(user_id=message.from_user.id)
    )
    await message.answer(**content.as_kwargs(), reply_markup=my_order_kb())

@dp.message(F.text == "üë®‚Äçüíª –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_menu(message: types.Message):
     if (db.user_exists(message.from_user.id)):
        if (int(db.admin_exists(message.from_user.id)) == 1):
            await bot.send_message(message.chat.id, f"{message.from_user.full_name}, –í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
                            reply_markup=sec_adm_keyboard)
     
@dp.message(F.text == "üõí –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
async def admin_menu(message: types.Message):
     if (db.user_exists(message.from_user.id)):
        if (int(db.admin_exists(message.from_user.id)) == 1):
            await bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω—ã–π —Ä–∞–∑–¥–µ–ª - üõí –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
                            reply_markup=card_adm_keyboard)
            
@dp.message(F.text == "üñ•Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def admin_menu(message: types.Message):
     if (db.user_exists(message.from_user.id)):
        if (int(db.admin_exists(message.from_user.id)) == 1):
            await bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω—ã–π —Ä–∞–∑–¥–µ–ª - üñ•Ô∏è –î–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
                            reply_markup=admin_adm_keyboard)

@dp.message(F.text == "üìé–ü—Ä–æ—á–µ–µ")
async def admin_menu(message: types.Message):
     if (db.user_exists(message.from_user.id)):
        if (int(db.admin_exists(message.from_user.id)) == 1):
            await bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω—ã–π —Ä–∞–∑–¥–µ–ª - üìé–ü—Ä–æ—á–µ–µ",
                            reply_markup=another_adm_keyboard)

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def cmd_admin(message: types.Message, state: FSMContext):
    if (db.user_exists(message.from_user.id)):
            if (int(db.admin_exists(message.from_user.id)) == 1):
                await message.answer(text="–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                await state.set_state(AdminAction.get_new_admin_id)

@dp.message(AdminAction.get_new_admin_id)
async def admin_send(message: types.Message, state: FSMContext):
    db.set_admin(user_id=message.text)
    await message.answer(text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä c ID {message.text} –¥–æ–±–∞–≤–ª–µ–Ω")
    await state.clear()


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def cmd_admin(message: types.Message, state: FSMContext):
    if (db.user_exists(message.from_user.id)):
            if (int(db.admin_exists(message.from_user.id)) == 1):
                await message.answer(text="–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å")
                await state.set_state(AdminAction.get_del_admin_id)

@dp.message(AdminAction.get_del_admin_id)
async def admin_send(message: types.Message, state: FSMContext):
    db.del_admin(user_id=message.text)
    await message.answer(text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä c ID {message.text} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω")
    await state.clear()


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_admin(message: types.Message, state: FSMContext):
    if (db.user_exists(message.from_user.id)):
            if (int(db.admin_exists(message.from_user.id)) == 1):
                await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –∏ –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 500 xxxxyyyyzzzz")
                await state.set_state(AdminAction.add_new_card)

@dp.message(AdminAction.add_new_card)
async def cmd_admin(message: types.Message, state: FSMContext):
    try:
        if ((message.text.split()[0].isdigit()) and (message.text.split()[1].isdigit())):
            db.add_product(amount=(message.text.split())[0], number=(message.text.split())[1])
            await message.answer(text=f"–ö–∞—Ä—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª–æ–º {(message.text.split())[0]} —Å –Ω–æ–º–µ—Ä–æ–º {(message.text.split())[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            await state.clear()
        else:
            await message.answer(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é")
            await state.clear()
    except:
            await message.answer(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é")
            await state.clear()


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_admin(message: types.Message, state: FSMContext):
    if (db.user_exists(message.from_user.id)):
            if (int(db.admin_exists(message.from_user.id)) == 1):
                await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å", reply_markup=None)
                await state.set_state(AdminAction.del_card)

@dp.message(AdminAction.del_card)
async def cmd_admin(message: types.Message, state: FSMContext):
    try:
        if message.text.isdigit(): 
            db.del_product(number=message.text)
            await message.answer(text=f"–ö–∞—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º {message.text} —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            await state.clear()
        else:
            await message.answer(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é")
            await state.clear()
    except:
            await message.answer(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n\n–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é")
            await state.clear()
        


@dp.message(F.text == "‚§µÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î")
async def cmd_admin(message: types.Message, state: FSMContext):
    if (db.user_exists(message.from_user.id)):
            if (int(db.admin_exists(message.from_user.id)) == 1):
                await bot.send_document(message.chat.id, FSInputFile('database.db'))


@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def buy_process(web_app_message):
    await bot.send_invoice(web_app_message.chat.id,
                           title='Apple Gift Card üçè',
                           description='–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Apple üçè',
                           provider_token='1744374395:TEST:ab45a4f8517a6551e5e2',
                           currency='rub',
                           need_email=True,
                           prices=PRICE[f'{web_app_message.web_app_data.data}'],
                           start_parameter='example',
                           payload='some_invoice')

@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_process(pre_checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print()
    await bot.send_message(message.chat.id, f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n{message.successful_payment}')