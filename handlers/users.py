import datetime
import pathlib
import sys
from main import bot, dp
from keyboards import *
from aiogram import Bot, Dispatcher, types, Router
from aiogram import types, F
from aiogram.types.input_file import FSInputFile
from aiogram.utils.formatting import Text, Code, TextLink
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ContentType, Message
from db import Database
from states import *

script_dir = pathlib.Path(sys.argv[0]).parent
db_file = script_dir / 'database.db'

db = Database(db_file=db_file)


@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    content = Text(
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n",
        "üÜî ID: ", (Code(message.from_user.id)), "\n",
        "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ", db.reg_date(user_id=message.from_user.id), "\n"
        "üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: ", db.bills(user_id=message.from_user.id)
    )
    await message.answer(**content.as_kwargs(), reply_markup=my_order_kb())

@dp.message(F.text == "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª")
async def feedback(message: types.Message):
            content = Text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à ", TextLink("–∫–∞–Ω–∞–ª", url="https://t.me/+mmUHWUQI45Y0N2Ni"),"!")
            await message.answer(**content.as_kwargs(),
                            reply_markup=mnkeyboard.as_markup(resize_keyboard=True))

@dp.message(F.text == "üë®‚Äçüíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def feedback(message: types.Message):
            content = Text("–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤ –∏—Ö –≤ ", TextLink("–¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.", url="https://t.me/@applecardss_tp"),"\n–û–±—Ä–∞—Ç–∏—Ç–∏–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–ª—è —Ä–µ—à–µ–Ω–∏–µ –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞–º –º–æ–∂–µ—Ç –ø–æ–¥—Ä–µ–±–æ–≤–∞—Ç—å—Å—è ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (", (Code(message.from_user.id)), ")")
            await message.answer(**content.as_kwargs(),
                            reply_markup=mnkeyboard.as_markup(resize_keyboard=True))

@dp.message(F.text == "üìù –û—Ç–∑—ã–≤—ã")
async def feedback(message: types.Message):
            content = Text("–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è –≤ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, —Ç–æ ", TextLink("–¥–µ—Å—è—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", url="https://t.me/+mmUHWUQI45Y0N2Ni"), " –æ—Ç–ª—á–∏–Ω–æ –ø–æ–º–æ–≥—É—Ç –í–∞–º –≤ —ç—Ç–æ–º!")
            await message.answer(**content.as_kwargs(),
                            reply_markup=mnkeyboard.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "orders")
async def history(callback: types.CallbackQuery):
    order = str(str(db.buy_history(user_id=callback.message.chat.id)).replace('[','').replace("'"," ").replace("(","").replace('"',"").replace("datetime",'').replace(",",'').replace('date','').replace(".",'').replace("|", "").replace(")","").replace("]",'').replace("'\'","").replace("\\","").lstrip()).split()
    
    lenght = len(order)
    index = lenght//7
    nmes = " "
    for i in range(index):
        mes = f"üçè {order[(7*i)+4]} {order[(7*i)+5]} –Ω–∞ {order[(7*i)+3]}‚ÇΩ | {order[(7*i)]}.{order[(7*i)+1]}.{order[(7*i)+2]}\n–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {order[(7*i)+6]}\n\n"
        nmes = nmes + mes

    await callback.message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n{str(nmes)}")
